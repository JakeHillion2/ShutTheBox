import tkinter as tkimport random,os,inspect,timeimport tkinter.simpledialog as simpledialogfrom tkinter import messageboxfrom urllib import request__version = '2.12'__grab_link = 'https://www.dropbox.com/s/3rl8ljy0615juhi/ShutTheBox2.pyw?dl=1'__image_link = 'https://www.dropbox.com/s/z90pz2uxqfex3i5/Splash.pgm?dl=1'version = __version# Move Working Directoryabspath = os.path.abspath(__file__)dname = os.path.dirname(abspath)os.chdir(dname)def do_update():    print('Downloading update...')    with request.urlopen(__grab_link) as response:        update = response.read()    self = inspect.getfile(inspect.currentframe())    print(self)    self = self.split('.')    self1 = self[0] + '.pyw'    self2 = self[0] + '.py'    print(self2)    self = self1    if os.path.isfile(self2):        os.remove(self2)    print(self)    with open(self,'wb') as file:        file.write(update)    temp_window = tk.Tk()    messagebox.showinfo('Update Complete','Update complete. Restart the game.',master=temp_window)    temp_window.destroy()    time.sleep(5)    exit()def add_image_file():    print('Downloading image file...')    with request.urlopen(__image_link) as response:        image = response.read()    with open('Splash.pgm','wb') as file:        file.write(image)##try:with request.urlopen(__grab_link) as response:   content = response.read()   content = str(content)   for line in content.split(r"\r"):       if '__version' in line:           splits = line.split("'")           act_version = splits[1].replace("\\","")           major,minor = act_version.split(".")           my_major,my_minor = __version.split(".")           if major>my_major:               do_update()           elif minor>my_minor:                do_update()           break##except:##    passif not os.path.isfile('Splash.pgm'):    add_image_file()def std_dev(file_addr):    h_score = 162    l_score = 34    if not os.path.isfile(file_addr):        return(([None]*11,[None]*11),h_score,l_score)    with open(file_addr,'r') as file:        _file = file.read().split('\n')        _file.pop(0)        _file.pop(len(_file)-1)        players = [[]]*11        players = [list() for x in players]        for line in _file:            each_player = line.split(',')            i = -1            for each in each_player:                if i==-1:                    rounds = int(each)                else:                    players[i].append(int(each)/rounds)                    if h_score<int(each) and rounds==5:                        h_score = int(each)                    if l_score>int(each) and rounds==5:                        l_score = int(each)                i += 1    stdevs,averages = [],[]    for player in players:        if len(player)==0:            stdevs.append(None)            averages.append(None)        else:            fx, fx2,n = 0,0,0            for each in player:                fx += each                fx2 += each**2                n += 1            stdev = (fx2/n-(fx/n)**2)**0.5            averages.append(fx/n)            stdevs.append(stdev)    return((stdevs,averages,h_score,l_score))        class ShutTheBox():    def __init__(self):        # Set Constants        self.colours = [            ['red','white'],            ['violet red','white'],            ['yellow','black'],            ['sea green','black'],            ['orange','white'],            ['brown','white'],            ['white','black'],            ['cyan','black'],            ['orchid','white'],            ['peru','black'],            ['chartreuse','black']        ]        self.debug = False        self.debug_nums = [6,3,6,2,6,1,6,5,4,3,2,2,6,3,6,2,6,1,6,5,4,3,2,1]        self.font = '-*-Microsoft Sans Serif-Normal-R-*--*-480-*-*-*-*-ISO8859-1'        self.small_font = '-*-Microsoft Sans Serif-Normal-R-*--*-240-*-*-*-*-ISO8859-1'        self.log_address = 'Score_Log.csv'        # Initialise Some Variables        self.single_dice_on = False        self.player_turn = 0        self.board = [1,2,3,4,5,6,7,8,9]        self.round = 1        self.awaiting_number = False        self.acceptable_inputs = []        # Build The Window        self.window = tk.Tk()        self.main_frame = tk.Frame(master=self.window,height=600,width=800,bg='blue')        self.window.wm_title("Shut The Box - DEBUG" if self.debug else ("Shut The Box - v" + version))        self.selection_box = tk.Frame(master=self.main_frame,height=150,width=700,bd=10,bg='blue',relief='ridge')        self.main_frame.pack()        self.window.update()        self.splash_photo = tk.PhotoImage(file='Splash.pgm')        self.splash_label = tk.Label(master=self.main_frame,image=self.splash_photo,width=800,height=600)        self.splash_label.place(x=0,y=0)        self.window.update()        self.single_dice_var = tk.IntVar()        self.single_dice_var.set(0)        # Bind Keyboard Inputs        self.window.bind("<Key>",self.key)        # Ask for players and rounds        self.players,self.rounds = None,None        while self.players is None:            self.players = simpledialog.askinteger(title='Number of Players',prompt='Enter the number of players (2-11)',parent=self.window,minvalue=2,maxvalue=11)        while self.rounds is None:            self.rounds = simpledialog.askinteger(title='Number of Rounds',prompt='Enter the number of rounds (1-5)',parent=self.window,minvalue=1,maxvalue=5)        # Destroy the splash screen        self.splash_label.place_forget()        # Render the content        # Dice Labels        self.dice1label = tk.Label(master=self.main_frame,width=2,height=1,bd=5,relief='ridge',text=' ',font=self.font,bg='red',fg='white')        self.dice1label.place(x=10,y=50)        self.dice2label = tk.Label(master=self.main_frame,width=2,height=1,bd=5,relief='ridge',text=' ',font=self.font,bg='red',fg='white')        self.dice2label.place(x=82,y=50)        # Player Score Labels        self.score_labels = []        self.player_scores = [0]*self.players        for i in range(self.players):            colour = self.colours[i][0]            text_colour = self.colours[i][1]            self.score_labels.append(tk.Label(master=self.main_frame,width=4,height=1,bd=5,relief='ridge',text='0',font=self.small_font,bg=colour,fg=text_colour))            self.score_labels[len(self.score_labels)-1].place(x=723,y=8+49*i)        # To Play Label        self.to_play_label = tk.Label(master=self.main_frame,height=1,text='RED TO PLAY',font=self.font,bg='blue',fg='red')        self.to_play_label.place(x=440,y=40,anchor=tk.CENTER)        # Round Label        self.round_label = tk.Label(master=self.main_frame,height=1,text='ROUND 1 OF 5',font=self.small_font,bg='blue',fg='red')        self.round_label.place(x=440,y=140,anchor=tk.CENTER)        # Exit Button        self.exit_button = tk.Label(master=self.main_frame,height=1,width=6,bd=3,bg='black',fg='yellow',relief='ridge',text='Exit',font=self.small_font)        self.exit_button.place(x=790,y=590,anchor=tk.SE)        self.exit_button.bind("<Button-1>", self.close_window)        # New Game Button        self.new_game_button = tk.Label(master=self.main_frame,height=1,width=10,bd=3,bg='black',fg='yellow',relief='ridge',text='New Game',font=self.small_font)        self.new_game_button.place(x=10,y=590,anchor=tk.SW)        self.new_game_button.bind("<Button-1>", self.new_game)        # End Turn Button        self.end_turn_button = tk.Label(master=self.main_frame,height=1,width=8,bd=3,bg='black',fg='yellow',relief='ridge',text='End Turn',font=self.small_font)        self.end_turn_button.place(x=165,y=590,anchor=tk.SW)        self.end_turn_button.bind("<Button-1>", self.move_on_turn)        # Throw Dice Button        self.throw_dice_button = tk.Label(master=self.main_frame,height=1,width=10,bd=3,bg='black',fg='yellow',relief='ridge',text='Throw Dice',font=self.small_font)        self.throw_dice_button.place(x=10,y=10,anchor=tk.NW)        self.throw_dice_button.bind("<Button-1>", self.throw_dice_animation)        # Show Stats Button        self.show_stats_button = tk.Label(master=self.main_frame,height=1,width=10,bd=3,bg='black',fg='yellow',relief='ridge',text='Show Stats',font=self.small_font)        self.show_stats_button.place(x=680,y=590,anchor=tk.SE)        self.show_stats_button.bind("<Button-1>", self.show_stats)        # Single Dice Mode Checkbox        self.toggle_single_dice_checkbox = tk.Checkbutton(master=self.main_frame,text='Enable Single Dice Mode',bg='blue',fg='white',variable=self.single_dice_var,command=self.on_single_dice_change)        # Number Boxes        self.number_labels = []        self.selection_buttons = []        self.selection_box = tk.Frame(master=self.main_frame,height=150,width=700,bd=10,bg='blue',relief='ridge')        self.selection_box.place(x = 400, y = 350, anchor=tk.CENTER)        for i in range(1,10):            self.number_labels.append(tk.Label(master=self.selection_box,width=2,height=1,bd=5,relief='ridge',text=i,font=self.font,bg='black',fg='red'))            self.number_labels[len(self.number_labels)-1].grid(row=0,column=i)            self.number_labels[len(self.number_labels)-1].bind('<Button-1>',self.number_clicked_function,i)            self.selection_buttons.append(tk.Label(master=self.selection_box,width=2,height=1,bd=3,relief='ridge',text='',font=self.font,bg='blue',fg='red'))            self.selection_buttons[len(self.selection_buttons)-1].grid(row=1,column=i)        # Begin the Game        self.round_label.config(text=self.gen_round_text())        self.next_turn()        # Main Loop        self.window.mainloop()    def close_window(self,x):        if tk.messagebox.askokcancel('Exit Game','Are you sure you wish to exit?'):            self.window.destroy()    def new_game(self,x):        if tk.messagebox.askokcancel('Start New Game','Are you sure you wish to start a new game?'):            self.window.destroy()            self.__init__()    def move_on_turn(self,x):        if tk.messagebox.askokcancel('End Turn','Are you sure you wish to end this turn?'):            self.next_turn()    def gen_round_text(self):        return('ROUND ' + str(self.round) + ' OF ' + str(self.rounds))    def single_dice_option(self,val):        if val:            self.toggle_single_dice_checkbox.place(x=10,y=120)        else:            self.toggle_single_dice_checkbox.place_forget()    def number_clicked_function(self,n):        if type(n)==tk.Event:            num = int(self.number_labels.index(n.widget)+1)        else:            num = int(n)        if self.awaiting_number:            print(num,'was clicked')            if num in self.acceptable_inputs[0]:                self.acceptable_inputs[0].remove(num)                self.acceptable_inputs = [[None,None],self.acceptable_inputs[0][0]]                self.selection_buttons[num-1].config(text='X')                self.number_labels[num-1].config(text='',bg='grey')                self.player_scores[self.player_turn-1] += num                self.board.remove(num)                if not False in [False for x in self.board if x>6]:                    self.single_dice_option(True)            elif num in self.acceptable_inputs:                self.acceptable_inputs = []                self.awaiting_number = False                self.throw_dice_button.bind("<Button-1>", self.throw_dice_animation)                self.throw_dice_button.config(fg='yellow')                self.selection_buttons[num-1].config(text='X')                self.number_labels[num-1].config(text='',bg='grey')                self.player_scores[self.player_turn-1] += num                self.board.remove(num)                if not False in [False for x in self.board if x>6]:                    self.single_dice_option(True)            else:                return(0)            self.update_scores()            if len(self.board)==0:                self.board = [1,2,3,4,5,6,7,8,9]                self.reset_board()                self.single_dice_var.set(0)                self.on_single_dice_change()                self.single_dice_option(False)            print(self.acceptable_inputs)        else:            print(num,'was clicked unwantingly')                def throw_dice_animation(self,x,y=0):        if (type(x) is tk.Event) or (x is None):            self.throw_dice_button.bind("<Button-1>", self.do_nothing)            self.throw_dice_button.config(fg='grey')            if self.single_dice_on:                print('Single dice throw called')                self.dice1label.config(text = random.randint(1,6))                self.window.update()                self.throw_dice_button.after(40,self.throw_dice_animation,10,1)            else:                print('Double dice throw called')                self.dice1label.config(text = random.randint(1,6))                self.dice2label.config(text = random.randint(1,6))                self.window.update()                self.throw_dice_button.after(40,self.throw_dice_animation,10,0)        else:            if y==0:                # Double throw                if x>0:                    # Randomise and reduce x                    self.dice1label.config(text = random.randint(1,6))                    self.dice2label.config(text = random.randint(1,6))                    self.window.update()                    self.throw_dice_button.after(40,self.throw_dice_animation,x-1,0)                else:                    if self.debug and len(self.debug_nums)>1:                        r1,r2 = self.debug_nums.pop(0),self.debug_nums.pop(0)                    else:                        r1,r2 = random.randint(1,6),random.randint(1,6)                    self.dice1label.config(text = r1)                    self.dice2label.config(text = r2)            elif y==1:                # Single throw                if x>0:                    # Randomise and reduce x                    self.dice1label.config(text = random.randint(1,6))                    self.window.update()                    self.throw_dice_button.after(40,self.throw_dice_animation,x-1,1)                else:                    if self.debug and len(self.debug_nums)>0:                        r1,r2 = self.debug_nums.pop(0),0                    else:                        r1,r2 = random.randint(1,6),0                    self.dice1label.config(text = r1)            if not x>0:                self.awaiting_number = True                self.set_available(r1,r2)    def set_available(self,r1,r2):        self.acceptable_inputs = []        if (r1 in self.board) and (r2 in self.board) and (r1!=r2):            self.acceptable_inputs.append([r1,r2])        else:            self.acceptable_inputs.append([None,None])        if r1+r2 in self.board:            self.acceptable_inputs.append(r1+r2)        else:            self.acceptable_inputs.append(None)        if self.acceptable_inputs == [[None,None],None]:            # End turn            self.to_play_label.config(text='TURN OVER')            self.window.update()            self.awaiting_number = False            self.window.after(1200,self.next_turn)        print(self.acceptable_inputs)    def update_scores(self):        for i in range(0,len(self.score_labels)):            self.score_labels[i].config(text=self.player_scores[i])        self.window.update()    def next_turn(self):        self.player_turn += 1        if self.player_turn>self.players:            self.player_turn = 1            self.round += 1            print('--- SCORES AT END OF PREVIOUS ROUND ---')            print(self.player_scores)            if not self.round>self.rounds:                self.round_label.config(text=self.gen_round_text())            else:                print('GAME COMPLETE')                win_index = self.player_scores.index(max(self.player_scores))                win_colour = self.colours[win_index][0]                self.to_play_label.config(text=win_colour.upper() + ' WINS',fg=win_colour)                self.round_label.config(fg=win_colour)                self.throw_dice_button.bind("<Button-1>", self.do_nothing)                self.throw_dice_button.config(fg='grey')                self.window.update()                os.system('say ' + win_colour + ' has won the game')                if os.path.isfile(self.log_address):                    with open(self.log_address,'r') as file:                        content = file.read()                else:                    content = 'Rounds,Red,Violet Red,Yellow,Sea Green,Orange,Brown,White,Cyan,Orchid,Peru,Chartreuse\n'                with open(self.log_address,'w') as file:                    new = content + str(self.rounds) + ',' + ','.join([str(x) for x in self.player_scores]) + '\n'                    file.write(new)                return(0)        main_colour,secondary_colour = self.colours[self.player_turn-1][0], self.colours[self.player_turn-1][1]        self.to_play_label.config(text=main_colour.upper()+' TO PLAY',fg=main_colour)        self.round_label.config(fg=main_colour)        self.reset_board()        self.single_dice_var.set(0)        self.on_single_dice_change()        self.single_dice_option(False)        self.throw_dice_button.bind("<Button-1>", self.throw_dice_animation)        self.dice1label.config(bg=main_colour)        self.dice2label.config(bg=main_colour)        self.dice1label.config(fg=secondary_colour,text=' ')        self.dice2label.config(fg=secondary_colour,text=' ')        self.board = [1,2,3,4,5,6,7,8,9]        self.throw_dice_button.config(fg=main_colour)        self.window.update()    def reset_board(self):        main_colour,secondary_colour = self.colours[self.player_turn-1][0], self.colours[self.player_turn-1][1]        for i in self.selection_buttons:            i.config(fg=main_colour)        for i in self.number_labels:            i.config(fg=main_colour)        self.reset_selector_buttons()    def on_single_dice_change(self):        if self.single_dice_var.get()==1:            print('Toggling single dice mode on')            self.dice2label.place_forget()            self.single_dice_on = True        else:            print('Toggling single dice mode off')            self.dice2label.place(x=82,y=50)            self.single_dice_on = False    def reset_selector_buttons(self):        for i in self.selection_buttons:            i.config(text=' ')        for i in range(1,10):            self.number_labels[i-1].config(text=i,bg='black')    def do_nothing(*args):        pass    def show_stats(self,x):        self.sub_window = tk.Tk()        self.sub_window_frame = tk.Frame(master=self.sub_window,height=540,width=295,bg='blue')        self.sub_window_frame.pack()        self.sub_window.wm_title("Shut The Box - Statistics")        i = 0        boxes = []        stdevs,averages,h_score,l_score = std_dev(self.log_address)        print(h_score)        for colour in self.colours:            stdev,mean = stdevs[i],averages[i]            _text = 'μ: ' + str(round(mean,2) if mean is not None else 'N/A') + '   -   σ: ' + str(round(stdev,2) if stdev is not None else 'N/A')            box = tk.Label(master=self.sub_window_frame,height=1,width=20,font=self.small_font,text=_text,fg=colour[0],bg='black',relief='ridge')            boxes.append(box)            i+=1        _text = 'High Score: ' + str(h_score)        box = tk.Label(master=self.sub_window_frame,height=1,width=20,font=self.small_font,text=_text,fg='black',bg='white',relief='ridge')        boxes.append(box)        _text = 'Low Score: ' + str(l_score)        box = tk.Label(master=self.sub_window_frame,height=1,width=20,font=self.small_font,text=_text,fg='black',bg='white',relief='ridge')        boxes.append(box)        i = 0        for box in boxes:            box.place(y=i*40+15,x=15,anchor=tk.NW)            i+=1        def key(self,event):        if event.char==' ' or event.char=='\r':            # Space Pressed, Roll Dice            if (not self.awaiting_number) and (self.throw_dice_button.cget('fg')!='grey'):                self.throw_dice_animation(None)        elif event.char.isnumeric():            # Number Pressed, Press Number            self.number_clicked_function(event.char)        else:            print("pressed", repr(event.char))test = ShutTheBox()